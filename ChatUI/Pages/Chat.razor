@page "/chat"
@using ChatUI.Models
@using ChatUI.Services
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="chat-container">
    @if (ChatService.IsConnected)
    {
        <div class="chat-box">
            <ul id="message-list">
                <MessageList Messages="ChatService.Messages" />
            </ul>

            <ChatFooter OnSendMessage="SendMessage" OnExitChat="ExitChat" />
        </div>
    }
    else
    {
        <div class="register-container animated fadeIn">
            <h3 class="welcome-text">Welcome to the Chat!</h3>
            <label for="name">Enter your display name:</label>
            <input id="name" @bind="userName" class="form-control" />
            <button @onclick="ConnectToChat" class="btn btn-primary">Join Chat</button>
        </div>
    }
</div>

@code {
    private string userName = "";

    protected override void OnInitialized()
    {
        ChatService.MessagesUpdated += OnMessagesUpdated;
    }

    private async Task ConnectToChat()
    {
        if (string.IsNullOrWhiteSpace(userName)) return;

        try
        {
            await ChatService.ConnectAsync(userName);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to chat: {ex.Message}");
        }
    }

    private async Task SendMessage(string message)
    {
        try
        {
            await ChatService.SendMessageAsync(userName, message);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    private async Task ExitChat()
    {
        try
        {
            if (ChatService.IsConnected)
            {
                await ChatService.DisconnectAsync(userName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disconnecting from chat: {ex.Message}");
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);

        var functionExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof elementExists !== 'undefined'");
        if (functionExists)
        {
            var elementExists = await JSRuntime.InvokeAsync<bool>("elementExists", "message-list");
            if (elementExists)
            {
                await JSRuntime.InvokeVoidAsync("scrollToBottom", "message-list");
            }
        }
    }

    private void OnMessagesUpdated()
    {
        InvokeAsync(async () =>
        {
            StateHasChanged();
            await ScrollToBottom();
        });
    }

    public async ValueTask DisposeAsync()
    {
        ChatService.MessagesUpdated -= OnMessagesUpdated;
        if (ChatService is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }
}